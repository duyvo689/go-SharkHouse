// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email,
    phone,
    avatar,
    full_name,
    hashed_password
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, full_name, avatar, email, phone, hashed_password, user_role, password_changed_at, created_at
`

type CreateUserParams struct {
	Email          string         `json:"email"`
	Phone          string         `json:"phone"`
	Avatar         sql.NullString `json:"avatar"`
	FullName       string         `json:"full_name"`
	HashedPassword string         `json:"hashed_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.Phone,
		arg.Avatar,
		arg.FullName,
		arg.HashedPassword,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Avatar,
		&i.Email,
		&i.Phone,
		&i.HashedPassword,
		&i.UserRole,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, full_name, avatar, email, phone, hashed_password, user_role, password_changed_at, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Avatar,
		&i.Email,
		&i.Phone,
		&i.HashedPassword,
		&i.UserRole,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users 
SET 
    email = $2,
    phone = $3,
    avatar = $4,
    full_name = $5,
    user_role = $6
WHERE id = $1
RETURNING id, full_name, avatar, email, phone, hashed_password, user_role, password_changed_at, created_at
`

type UpdateUserParams struct {
	ID       int64          `json:"id"`
	Email    string         `json:"email"`
	Phone    string         `json:"phone"`
	Avatar   sql.NullString `json:"avatar"`
	FullName string         `json:"full_name"`
	UserRole string         `json:"user_role"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.Phone,
		arg.Avatar,
		arg.FullName,
		arg.UserRole,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Avatar,
		&i.Email,
		&i.Phone,
		&i.HashedPassword,
		&i.UserRole,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
